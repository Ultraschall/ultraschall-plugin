name: CMake

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

jobs:
  configure:
    runs-on: ubuntu-latest
    outputs:
      build_timestamp: ${{steps.timestamp.outputs.timestamp}}
      build_id: R050100_${{github.run_number}}_${{steps.timestamp.outputs.timestamp}}
    steps:
      - name: configure build id
        id: timestamp
        run: echo "::set-output name=timestamp::$(date -u +'%Y%m%d%H%M')"

  build:
    needs: configure
    strategy:
      matrix:
        os: [windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: install (linux)
        run: sudo apt-get install ninja-build
        if: matrix.os == 'ubuntu-latest'

      - name: install 1 of 2 (windows)
        run: choco install ninja
        if: matrix.os == 'windows-latest'

      - name: install 2 of 2 (windows)
        run: |
          $vsPath = & (Join-Path ${env:ProgramFiles(x86)} '\\Microsoft Visual Studio\\Installer\\vswhere.exe') -property installationPath
          Import-Module (Join-Path $vsPath 'Common7\\Tools\\Microsoft.VisualStudio.DevShell.dll')
          Enter-VsDevShell -VsInstallPath $vsPath -SkipAutomaticLocation -DevCmdArguments "-arch=x64"
        if: matrix.os == 'windows-latest'

      - name: install (macos)
        run: brew install ninja
        if: matrix.os == 'macos-latest'

      - name: configure
        run: cmake -G Ninja -B ${{runner.workspace}}/build -Wno-dev -DCMAKE_BUILD_TYPE=Release

      - name: build
        run: cmake --build ${{runner.workspace}}/build --target reaper_ultraschall --config Release

      - uses: actions/upload-artifact@v2
        with:
          name: ${{needs.configure.outputs.build_id}}
          path: ${{runner.workspace}}/build/artifacts/*

  release:
    needs: [configure, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: ${{needs.configure.outputs.build_id}}
          path: ${{runner.workspace}}/artifacts

      - name: display
        run: ls -l ${{runner.workspace}}/artifacts

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{secrets.GITHUB_TOKEN}}"
          automatic_release_tag: "${{needs.configure.outputs.build_id}}"
          prerelease: true
          files: ${{runner.workspace}}/artifacts/*
